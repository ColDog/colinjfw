<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="https://www.colinjfw.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://www.colinjfw.com/" rel="alternate" type="text/html" /><updated>2019-07-13T15:10:24+00:00</updated><id>https://www.colinjfw.com/feed.xml</id><title type="html">colinjfw</title><subtitle>Colin Walker | Team lead at Sendwithus. Code, devops and coffee.</subtitle><author><name>Colin Walker</name></author><entry><title type="html">Where is Serverless Going</title><link href="https://www.colinjfw.com/serverless-experience/" rel="alternate" type="text/html" title="Where is Serverless Going" /><published>2018-09-19T00:00:00+00:00</published><updated>2018-09-19T00:00:00+00:00</updated><id>https://www.colinjfw.com/serverless-experience</id><content type="html" xml:base="https://www.colinjfw.com/serverless-experience/">&lt;p&gt;Serverless as an idea has an incredible amount of hype and a huge amount of
tools around it right now. But where is serverless going? How will it evolve
over the next 5 to 10 years?&lt;/p&gt;

&lt;p&gt;In a previous post, I discussed the value of serverless as more of an
application paradigm. Serverless is a way in which we write and deploy code, not
a platform or a specific provider. It’s not lambda, it could be achieved with
writing code for kubernetes and deployed using containers.&lt;/p&gt;

&lt;h2 id=&quot;patterns&quot;&gt;Patterns&lt;/h2&gt;

&lt;p&gt;I’ve thought about a few different patterns of evolution that I believe
serverless will experience. These are general and not tied to a specific
platform overall.&lt;/p&gt;

&lt;h3 id=&quot;1-event-driven-application-architectures-will-become-normal-and-easier&quot;&gt;1. Event driven application architectures will become normal and easier&lt;/h3&gt;

&lt;p&gt;Event driven application architectures are effective for developing generic and
composable applications. They fit well in distributed systems and with
serverless functions. These applications will have better tooling and more
support overall.&lt;/p&gt;

&lt;h3 id=&quot;2-function-composition-components-will-emerge&quot;&gt;2. Function composition components will emerge&lt;/h3&gt;

&lt;p&gt;With more applications rushing in the direction of serverless and functions
being developed, there is a missing middle section. I have a function that
reacts to events to perform some sort of action, imagine a translation function
that will translate values into another language. To use this function, my data
storage layer needs to emit an event so that I can modify the document to add my
new translations. Wiring this all up will require new configurations and
paradigms.&lt;/p&gt;

&lt;p&gt;These may even be in the form of new languages. Right now this is done using
static configuration languages like yaml, but the
&lt;a href=&quot;https://ballerina.io&quot;&gt;ballerina&lt;/a&gt; programming language is a very interesting 
example of what is to come.&lt;/p&gt;

&lt;h3 id=&quot;3-kubernetes-will-probably-stay-but-be-heavily-hidden&quot;&gt;3. Kubernetes will probably stay but be heavily hidden&lt;/h3&gt;

&lt;p&gt;Kubernetes is too complex for most developers. With the emergence of opinionated
event driven application architectures, developers will be insulated from the
complexity of all of the kubernetes yaml files. This is a good thing. Kubernetes
as a platform will likely drive most of the serverless frameworks that will
emerge but developers will work with more code and less config.&lt;/p&gt;

&lt;h3 id=&quot;4-lambda-will-lose-out-in-favour-of-fargate&quot;&gt;4. Lambda will lose out in favour of fargate&lt;/h3&gt;

&lt;p&gt;Lambda and fargate are two aws serverless compute solutions. One runs
containers and one runs code inside specified runtimes. The lambda based
solution is cost effective but limited, functions are required to run in under 3
minutes and are limited in terms of CPU and memory. These types of runtimes will
begin to merge over time. A solution like fargate which runs a generic
application package will begin to become cheaper over time as platforms begin to
run more generic compute platforms.&lt;/p&gt;

&lt;h3 id=&quot;5-shipping-an-application-will-look-more-like-wiring-up-functions&quot;&gt;5. Shipping an application will look more like wiring up functions&lt;/h3&gt;

&lt;p&gt;Shipping a new application that performs common CRUD operations on a set of
resources will look more like wiring up a set of functions. Developers will be
able to deploy their favourite “Auth” function from a marketplace and wire this
up using gateways or workflow engines.&lt;/p&gt;</content><author><name>Colin Walker</name></author><summary type="html">Serverless as an idea has an incredible amount of hype and a huge amount of tools around it right now. But where is serverless going? How will it evolve over the next 5 to 10 years? In a previous post, I discussed the value of serverless as more of an application paradigm. Serverless is a way in which we write and deploy code, not a platform or a specific provider. It’s not lambda, it could be achieved with writing code for kubernetes and deployed using containers. Patterns I’ve thought about a few different patterns of evolution that I believe serverless will experience. These are general and not tied to a specific platform overall. 1. Event driven application architectures will become normal and easier Event driven application architectures are effective for developing generic and composable applications. They fit well in distributed systems and with serverless functions. These applications will have better tooling and more support overall. 2. Function composition components will emerge With more applications rushing in the direction of serverless and functions being developed, there is a missing middle section. I have a function that reacts to events to perform some sort of action, imagine a translation function that will translate values into another language. To use this function, my data storage layer needs to emit an event so that I can modify the document to add my new translations. Wiring this all up will require new configurations and paradigms. These may even be in the form of new languages. Right now this is done using static configuration languages like yaml, but the ballerina programming language is a very interesting example of what is to come. 3. Kubernetes will probably stay but be heavily hidden Kubernetes is too complex for most developers. With the emergence of opinionated event driven application architectures, developers will be insulated from the complexity of all of the kubernetes yaml files. This is a good thing. Kubernetes as a platform will likely drive most of the serverless frameworks that will emerge but developers will work with more code and less config. 4. Lambda will lose out in favour of fargate Lambda and fargate are two aws serverless compute solutions. One runs containers and one runs code inside specified runtimes. The lambda based solution is cost effective but limited, functions are required to run in under 3 minutes and are limited in terms of CPU and memory. These types of runtimes will begin to merge over time. A solution like fargate which runs a generic application package will begin to become cheaper over time as platforms begin to run more generic compute platforms. 5. Shipping an application will look more like wiring up functions Shipping a new application that performs common CRUD operations on a set of resources will look more like wiring up a set of functions. Developers will be able to deploy their favourite “Auth” function from a marketplace and wire this up using gateways or workflow engines.</summary></entry><entry><title type="html">Building an RDS Operator with the Operator Framework</title><link href="https://www.colinjfw.com/rds-operator/" rel="alternate" type="text/html" title="Building an RDS Operator with the Operator Framework" /><published>2018-09-01T00:00:00+00:00</published><updated>2018-09-01T00:00:00+00:00</updated><id>https://www.colinjfw.com/rds-operator</id><content type="html" xml:base="https://www.colinjfw.com/rds-operator/">&lt;p&gt;The &lt;a href=&quot;https://github.com/operator-framework&quot;&gt;operator framework&lt;/a&gt; from coreos is
a golang library for building operators on Kubernetes. An operator is a control
loop that watches custom resources on Kubernetes and takes some action to create
further resources.&lt;/p&gt;

&lt;p&gt;The operator framework does code generation, setup and handles most of the
boilerplate for setting up an operator. Starting a new project involves a simple
&lt;code class=&quot;highlighter-rouge&quot;&gt;operator-sdk new&lt;/code&gt;. From this we get a set of boilerplate code, a test framework
and Kubernetes manifests. The only major change I made here was to change from
using a set of manifests to making a helm chart.&lt;/p&gt;

&lt;p&gt;The project I made with this was a simple rds operator. It watches on a custom
resource definition &lt;code class=&quot;highlighter-rouge&quot;&gt;Database&lt;/code&gt; and creates an rds database with the same
database configuration.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://github.com/ColDog/rds-operator&quot;&gt;rds-operator&lt;/a&gt; project is the result
of this trial.&lt;/p&gt;</content><author><name>Colin Walker</name></author><summary type="html">The operator framework from coreos is a golang library for building operators on Kubernetes. An operator is a control loop that watches custom resources on Kubernetes and takes some action to create further resources. The operator framework does code generation, setup and handles most of the boilerplate for setting up an operator. Starting a new project involves a simple operator-sdk new. From this we get a set of boilerplate code, a test framework and Kubernetes manifests. The only major change I made here was to change from using a set of manifests to making a helm chart. The project I made with this was a simple rds operator. It watches on a custom resource definition Database and creates an rds database with the same database configuration. The rds-operator project is the result of this trial.</summary></entry><entry><title type="html">Serverless vs Containerization</title><link href="https://www.colinjfw.com/serverless/" rel="alternate" type="text/html" title="Serverless vs Containerization" /><published>2018-08-18T00:00:00+00:00</published><updated>2018-08-18T00:00:00+00:00</updated><id>https://www.colinjfw.com/serverless</id><content type="html" xml:base="https://www.colinjfw.com/serverless/">&lt;p&gt;Serverless is a brand new paradigm. As a web developer initially, the first
thing that I became used to was &lt;code class=&quot;highlighter-rouge&quot;&gt;rails new&lt;/code&gt; as a starting point for a project.
This spun up a set of files, databases and base configuration for working on a
project. Containerization, VM’s and other new developments in the world of
devops have challenged how we release software but none have significantly
challenged how we build it like serverless.&lt;/p&gt;

&lt;p&gt;Serverless, as a paradigm, is confusing. We know it’s running on someone’s
server somewhere. Serverless, as some have described the term, is just someone
elses server. Others associate the term with primarily the concept of functions.
Functions as a service are programs that both AWS and Google Cloud are providing
as managed platforms to run code. There’s truth to both of these definitions.&lt;/p&gt;

&lt;p&gt;As I see serverless, it’s more synonymous with infinite scaling. The fact that I
can write a function, push it up the code, and that code will now scale
infinitely and elastically based on demand to actually use that code. It
abstracts away packaging and infrastructure from the software development cycle.&lt;/p&gt;

&lt;p&gt;I think this removes the confusing concept of ‘functions’ from serverless.
Functions are a byproduct of the ability to have infinite scaling and a simple
deployment pipeline. Developers can now reasonably package a function and deploy
it. The only reason we would avoid doing this with a more legacy pipeline is
because the overhead just to push a mere function would be too high.&lt;/p&gt;

&lt;p&gt;However, you should be able to use serverless for much more than just functions.
I want to be able to run a legacy Rails app or Django application on a
serverless platform, what I get is infinite scaling.&lt;/p&gt;

&lt;h2 id=&quot;why-should-i-care-for-this-definition&quot;&gt;Why Should I Care for this Definition?&lt;/h2&gt;

&lt;p&gt;Recently I’ve been reading views of serverless and functions online and reading
quotes such as this:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The one exception, of course, being how everybody seems to have come together
around containers. So now everybody’s excited about containers, but the
battle’s shifted up. So you’ve won the battle, but lost the war. –
&lt;a href=&quot;https://read.acloud.guru/simon-wardley-is-a-big-fan-of-containers-despite-what-you-might-think-18c9f5352147&quot;&gt;Simon Wardley&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The argument here is that serverless and containerization are fundamentally
different technologies and that one will win out over another. Serverless
however, is more of a paradigm. It’s a development practice, a way of writing
code and deploying it not tied to one specific implementation. Containerization
on the other hand is merely a way of packaging code.&lt;/p&gt;

&lt;p&gt;What we should be thinking about is combining the serverless paradigm of
infinite scaling, simple development and deployment with containerization. This
is how I think about serverless. There are a set of different projects that
are doing this:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://kubeless.io/&quot;&gt;Kubeless&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://fission.io/&quot;&gt;Fission&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://cloud.google.com/knative/&quot;&gt;Knative&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Most of these are based on Kubernetes but they don’t have to be. These projects
to me represent the desired state of where development should be going. I want
the best of both worlds, I want to write my Django application, containerize it
and have it scale infinitely. I also want to write a simple API, maybe only 10
lines of Javascript, and deploy it through the same platform.&lt;/p&gt;

&lt;h3 id=&quot;my-take&quot;&gt;My Take&lt;/h3&gt;

&lt;p&gt;I’ve written a simple project to test the waters with serverless, if you are
interested, give it a look over &lt;a href=&quot;https://kubefuncs.com&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;</content><author><name>Colin Walker</name></author><summary type="html">Serverless is a brand new paradigm. As a web developer initially, the first thing that I became used to was rails new as a starting point for a project. This spun up a set of files, databases and base configuration for working on a project. Containerization, VM’s and other new developments in the world of devops have challenged how we release software but none have significantly challenged how we build it like serverless. Serverless, as a paradigm, is confusing. We know it’s running on someone’s server somewhere. Serverless, as some have described the term, is just someone elses server. Others associate the term with primarily the concept of functions. Functions as a service are programs that both AWS and Google Cloud are providing as managed platforms to run code. There’s truth to both of these definitions. As I see serverless, it’s more synonymous with infinite scaling. The fact that I can write a function, push it up the code, and that code will now scale infinitely and elastically based on demand to actually use that code. It abstracts away packaging and infrastructure from the software development cycle. I think this removes the confusing concept of ‘functions’ from serverless. Functions are a byproduct of the ability to have infinite scaling and a simple deployment pipeline. Developers can now reasonably package a function and deploy it. The only reason we would avoid doing this with a more legacy pipeline is because the overhead just to push a mere function would be too high. However, you should be able to use serverless for much more than just functions. I want to be able to run a legacy Rails app or Django application on a serverless platform, what I get is infinite scaling. Why Should I Care for this Definition? Recently I’ve been reading views of serverless and functions online and reading quotes such as this: The one exception, of course, being how everybody seems to have come together around containers. So now everybody’s excited about containers, but the battle’s shifted up. So you’ve won the battle, but lost the war. – Simon Wardley The argument here is that serverless and containerization are fundamentally different technologies and that one will win out over another. Serverless however, is more of a paradigm. It’s a development practice, a way of writing code and deploying it not tied to one specific implementation. Containerization on the other hand is merely a way of packaging code. What we should be thinking about is combining the serverless paradigm of infinite scaling, simple development and deployment with containerization. This is how I think about serverless. There are a set of different projects that are doing this: Kubeless Fission Knative Most of these are based on Kubernetes but they don’t have to be. These projects to me represent the desired state of where development should be going. I want the best of both worlds, I want to write my Django application, containerize it and have it scale infinitely. I also want to write a simple API, maybe only 10 lines of Javascript, and deploy it through the same platform.</summary></entry><entry><title type="html">Raft Algorithm</title><link href="https://www.colinjfw.com/raft-algorithm/" rel="alternate" type="text/html" title="Raft Algorithm" /><published>2017-03-13T00:00:00+00:00</published><updated>2017-03-13T00:00:00+00:00</updated><id>https://www.colinjfw.com/raft-algorithm</id><content type="html" xml:base="https://www.colinjfw.com/raft-algorithm/">&lt;p&gt;Raft is a distributed consensus algorithm. It provides a mechanism for keeping
a cluster of machines in sync. I had heard about the algorithm while deploying services like Consul at work. I thought it would be a good challenge to learn how to build my own raft implementation.&lt;/p&gt;

&lt;p&gt;I ended up with two implementations:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;https://github.com/coldog/new-raft&lt;/li&gt;
  &lt;li&gt;https://github.com/coldog/raft&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Both of these are missing configuration management and log compaction. I want to try and get these working at some point but have enjoyed playing with and learning from a bar minimum implementation.&lt;/p&gt;

&lt;h3 id=&quot;using-go&quot;&gt;Using GO&lt;/h3&gt;

&lt;p&gt;For both of these projects I used GO. I have become more excited about the capabilities provided by GO and some of the features of the language. This has become my go to language to build services at this point.&lt;/p&gt;</content><author><name>Colin Walker</name></author><summary type="html">Raft is a distributed consensus algorithm. It provides a mechanism for keeping a cluster of machines in sync. I had heard about the algorithm while deploying services like Consul at work. I thought it would be a good challenge to learn how to build my own raft implementation. I ended up with two implementations: https://github.com/coldog/new-raft https://github.com/coldog/raft Both of these are missing configuration management and log compaction. I want to try and get these working at some point but have enjoyed playing with and learning from a bar minimum implementation. Using GO For both of these projects I used GO. I have become more excited about the capabilities provided by GO and some of the features of the language. This has become my go to language to build services at this point.</summary></entry><entry><title type="html">How to Run Cost Effective Frontend Applications on S3</title><link href="https://www.colinjfw.com/s3-website/" rel="alternate" type="text/html" title="How to Run Cost Effective Frontend Applications on S3" /><published>2016-11-05T00:00:00+00:00</published><updated>2016-11-05T00:00:00+00:00</updated><id>https://www.colinjfw.com/s3-website</id><content type="html" xml:base="https://www.colinjfw.com/s3-website/">&lt;blockquote&gt;
  &lt;p&gt;This is a repost from &lt;a href=&quot;https://engineering.musefind.com/frontend-applications-on-s3-df5134e320f0&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A large part of my professional life involves cleaning up and maintaining infrastructure and doing devops for Team MuseFind. This post is about that part, maintaining single page applications in the cloud.&lt;/p&gt;

&lt;p&gt;I want to describe the evolution of Musefind’s frontend tech stack on AWS. Specifically moving from Docker and ECS to using S3 exclusively for managing our frontend applications. Overall, in moving to S3 we achieved better developer productivity and an easier to manage platform without sacrificing any of the features we enjoyed while using Nginx. Some of these tools are relatively unknown in the community and I wanted to show our journey here.&lt;/p&gt;

&lt;h2 id=&quot;nginx-and-containers&quot;&gt;Nginx and Containers&lt;/h2&gt;

&lt;p&gt;Our deployment stack originally started out as an Nginx based setup on the new container service from AWS. We liked this originally; we built docker images and could distribute those docker images throughout our dev, staging and production environments. It also allowed us a great deal of freedom, I am very familiar with Nginx configurations and pretty much anything you need from a frontend application server can be handled with Nginx.&lt;/p&gt;

&lt;p&gt;Each application also had its own load balancer. We also has fault tolerance and blue green deployments, we could run at least two instances of an application and upgrade incrementally, only routing traffic when health checks were passing. This piece is handled automatically by ECS.&lt;/p&gt;

&lt;p&gt;Overall, our team was happy with the setup. It was relatively quick to push to production and we were able to trigger updates to the application only when the health checks were passing.&lt;/p&gt;

&lt;h3 id=&quot;high-cost&quot;&gt;High Cost&lt;/h3&gt;

&lt;p&gt;For a startup, load balancers aren’t the best way to burn through your hard earned cash. Even though I loved our setup and felt comfortable with it, I was beginning to question how heavyweight it was. We shouldn’t have to pay for an individual load balancer for every frontend application. This was also a blocker to productivity. That pet project that we wanted to show to the rest of our team was relegated to localhost because we couldn’t justify the cost for a load balancer for a small internal application.&lt;/p&gt;

&lt;p&gt;Additionally, it was a fully custom setup. We had some downtime simply due to the fact that there were a lot of moving pieces and we were managing a large amount of them. Configuration mixups and even typo’s were common. For a small team, my goal is to remove as much devops work as possible, and this setup involved a significant amount of care.&lt;/p&gt;

&lt;p&gt;With four machines and four load balancers dedicated to solely our single page applications, we were simply spending too much to host static assets.&lt;/p&gt;

&lt;h2 id=&quot;s3-and-cloudfront&quot;&gt;S3 and Cloudfront&lt;/h2&gt;

&lt;p&gt;In our search for a better, more devops friendly setup, I began looking at hosting our site on S3. I had read some documentation as well as some blog posts about the advantages of hosting on S3. Initially, I didn’t think that it was the right place for a single page application.&lt;/p&gt;

&lt;p&gt;Our requirements for a hosting solution were as follows:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Browser caching for all assets.&lt;/li&gt;
  &lt;li&gt;Serving a single index file for all requests.&lt;/li&gt;
  &lt;li&gt;Full SSL support, with redirect from http to https.&lt;/li&gt;
  &lt;li&gt;Zero downtime deploys. It shouldn’t take longer that a few minutes to deploy.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Browser caching was a big request from a service that I view as an object store. Also, serving a single index file for every request seems out of the scope of what S3 has to offer without digging into complicated XML configurations which just looked painful. I wasn’t optimistic going into the project.&lt;/p&gt;

&lt;h3 id=&quot;enter-cloudfront&quot;&gt;Enter Cloudfront&lt;/h3&gt;

&lt;p&gt;Cloudfront is Amazon’s CDN. It distributes your static assets around the world to get faster response times. Cloudfront also has a host of, somewhat hidden, features that make it a first class choice for deploying your frontend application.&lt;/p&gt;

&lt;p&gt;A key feature is the integration with the AWS certificate service, which allows you to get SSL on your site for free with no configuration. That’s right, free. If you don’t manage your DNS with route53 I don’t believe this is possible, however this may be a reason to switch (view Mark’s response below for a summary of the capabilities of AWS Certificate Manager).&lt;/p&gt;

&lt;p&gt;Cloudfront also has some error handling features that allow us to control the error pages and error codes that will be returned to a client. This became an essential feature for us. This is how we solved serving the index page by default. We simply set error handlers to convert a 403 to a 200 and to return an index page. At first I thought this was a hack and was nervous about putting it into production, however after running this setup for over 6months I’m convinced that if this is a hack, it’s one that works very well.&lt;/p&gt;

&lt;p&gt;Now, if you’re counting cloudfront has knocked down a few of our requirements, however a couple remain, namely, zero downtime deployments and fine grained control over browser caching.&lt;/p&gt;

&lt;h3 id=&quot;enter-s3-website-a-ruby-gem&quot;&gt;Enter S3 Website, A Ruby Gem&lt;/h3&gt;

&lt;p&gt;S3 does support adding cache control headers to your resources, but who is going to update all of their assets manually? For a small website this is a likely scenario but we want to push easily two or three times a day without adding too much overhead to the process.&lt;/p&gt;

&lt;p&gt;While browsing github one day I found a real gem by the name of s3_website. It promised to handle a few things for us, uploading assets to S3, and dealing with some cloudfront specificities, however, it’s main selling point for us was it’s ability to gzip everything and set cache control headers on an entire group of resources easily.&lt;/p&gt;

&lt;p&gt;This gem has proved essentially to our daily workflow. The simple configuration options combined with the speed and reliability has proved a big win in terms of productivity for our frontend developers. Currently all pushes to our four frontend sites use this gem for the critical upgrades.&lt;/p&gt;

&lt;p&gt;With all of this in place, I was able to instruct cloudfront to use the cache headers from the S3 resource, allowing us to have fine grained control over cache headers. Specifically, everything under the assets path is cached forever.&lt;/p&gt;

&lt;h2 id=&quot;a-complete-setup&quot;&gt;A Complete Setup&lt;/h2&gt;

&lt;p&gt;With all of this in place, we have ticked all the boxes by hosting our website on S3. Today, if you visit any of Musefind’s sites you can see this setup in action. We have very fast page load times with full browser caching for all of our assets. We push code daily which involves simply updating some assets in S3 as well as issuing cloudfront invalidations. We also have full SSL support without touching a single cert file.&lt;/p&gt;

&lt;h3 id=&quot;getting-started-with-s3-website&quot;&gt;Getting Started With S3 Website&lt;/h3&gt;

&lt;p&gt;To get started on this yourself, I recommend getting the s3_website gem and following the documentation. In total, the configuration for creating a fully functioning website with cloudfront and S3 looks like this:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# s3_website.yml&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;s3_id&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;lt;%= ENV['AWS_ACCESS_KEY'] %&amp;gt;&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;s3_secret&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;lt;%= ENV['AWS_SECRET_KEY'] %&amp;gt;&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;s3_bucket&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;musefind.com&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;site&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;build&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;index_document&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;index.html&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;error_document&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;index.html&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;cache_control&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;static/*&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;public, max-age=60000000&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;*&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;no-cache, no-store&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;gzip&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;cloudfront_distribution_id&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;lt;YOUR_DIST_ID&amp;gt;&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;cloudfront_distribution_config&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;aliases&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;quantity&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;CNAME&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;musefind.com&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;cloudfront_invalidate_root&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;cloudfront_wildcard_invalidation&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We keep something like this in the root of your repositories, with different file’s for staging and production environments. We also upload frequently small test projects without incurring any significant costs. This has been a big boost in productivity.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;We now run a very cheap setup for our frontend applications with a heavy emphasis on developer productivity and speed to deploy. It takes us only a few minutes to get changes live to any of our four main websites. This has proven a big advantage in both bugfixes and keeping our frontend developers happy.&lt;/p&gt;

&lt;p&gt;Although it may be tricky to figure out, I encourage switching to S3 if you can. It takes some time to build up the resources and knowledge to run cloudfront and S3 together, but for the lean startup I think it’s a much superior approach to the conventional one of managing Nginx or Apache servers.&lt;/p&gt;

&lt;p&gt;Please let me know if you have any comments or questions!&lt;/p&gt;</content><author><name>Colin Walker</name></author><summary type="html">This is a repost from here. A large part of my professional life involves cleaning up and maintaining infrastructure and doing devops for Team MuseFind. This post is about that part, maintaining single page applications in the cloud. I want to describe the evolution of Musefind’s frontend tech stack on AWS. Specifically moving from Docker and ECS to using S3 exclusively for managing our frontend applications. Overall, in moving to S3 we achieved better developer productivity and an easier to manage platform without sacrificing any of the features we enjoyed while using Nginx. Some of these tools are relatively unknown in the community and I wanted to show our journey here. Nginx and Containers Our deployment stack originally started out as an Nginx based setup on the new container service from AWS. We liked this originally; we built docker images and could distribute those docker images throughout our dev, staging and production environments. It also allowed us a great deal of freedom, I am very familiar with Nginx configurations and pretty much anything you need from a frontend application server can be handled with Nginx. Each application also had its own load balancer. We also has fault tolerance and blue green deployments, we could run at least two instances of an application and upgrade incrementally, only routing traffic when health checks were passing. This piece is handled automatically by ECS. Overall, our team was happy with the setup. It was relatively quick to push to production and we were able to trigger updates to the application only when the health checks were passing. High Cost For a startup, load balancers aren’t the best way to burn through your hard earned cash. Even though I loved our setup and felt comfortable with it, I was beginning to question how heavyweight it was. We shouldn’t have to pay for an individual load balancer for every frontend application. This was also a blocker to productivity. That pet project that we wanted to show to the rest of our team was relegated to localhost because we couldn’t justify the cost for a load balancer for a small internal application. Additionally, it was a fully custom setup. We had some downtime simply due to the fact that there were a lot of moving pieces and we were managing a large amount of them. Configuration mixups and even typo’s were common. For a small team, my goal is to remove as much devops work as possible, and this setup involved a significant amount of care. With four machines and four load balancers dedicated to solely our single page applications, we were simply spending too much to host static assets. S3 and Cloudfront In our search for a better, more devops friendly setup, I began looking at hosting our site on S3. I had read some documentation as well as some blog posts about the advantages of hosting on S3. Initially, I didn’t think that it was the right place for a single page application. Our requirements for a hosting solution were as follows: Browser caching for all assets. Serving a single index file for all requests. Full SSL support, with redirect from http to https. Zero downtime deploys. It shouldn’t take longer that a few minutes to deploy. Browser caching was a big request from a service that I view as an object store. Also, serving a single index file for every request seems out of the scope of what S3 has to offer without digging into complicated XML configurations which just looked painful. I wasn’t optimistic going into the project. Enter Cloudfront Cloudfront is Amazon’s CDN. It distributes your static assets around the world to get faster response times. Cloudfront also has a host of, somewhat hidden, features that make it a first class choice for deploying your frontend application. A key feature is the integration with the AWS certificate service, which allows you to get SSL on your site for free with no configuration. That’s right, free. If you don’t manage your DNS with route53 I don’t believe this is possible, however this may be a reason to switch (view Mark’s response below for a summary of the capabilities of AWS Certificate Manager). Cloudfront also has some error handling features that allow us to control the error pages and error codes that will be returned to a client. This became an essential feature for us. This is how we solved serving the index page by default. We simply set error handlers to convert a 403 to a 200 and to return an index page. At first I thought this was a hack and was nervous about putting it into production, however after running this setup for over 6months I’m convinced that if this is a hack, it’s one that works very well. Now, if you’re counting cloudfront has knocked down a few of our requirements, however a couple remain, namely, zero downtime deployments and fine grained control over browser caching. Enter S3 Website, A Ruby Gem S3 does support adding cache control headers to your resources, but who is going to update all of their assets manually? For a small website this is a likely scenario but we want to push easily two or three times a day without adding too much overhead to the process. While browsing github one day I found a real gem by the name of s3_website. It promised to handle a few things for us, uploading assets to S3, and dealing with some cloudfront specificities, however, it’s main selling point for us was it’s ability to gzip everything and set cache control headers on an entire group of resources easily. This gem has proved essentially to our daily workflow. The simple configuration options combined with the speed and reliability has proved a big win in terms of productivity for our frontend developers. Currently all pushes to our four frontend sites use this gem for the critical upgrades. With all of this in place, I was able to instruct cloudfront to use the cache headers from the S3 resource, allowing us to have fine grained control over cache headers. Specifically, everything under the assets path is cached forever. A Complete Setup With all of this in place, we have ticked all the boxes by hosting our website on S3. Today, if you visit any of Musefind’s sites you can see this setup in action. We have very fast page load times with full browser caching for all of our assets. We push code daily which involves simply updating some assets in S3 as well as issuing cloudfront invalidations. We also have full SSL support without touching a single cert file. Getting Started With S3 Website To get started on this yourself, I recommend getting the s3_website gem and following the documentation. In total, the configuration for creating a fully functioning website with cloudfront and S3 looks like this: # s3_website.yml s3_id: &amp;lt;%= ENV['AWS_ACCESS_KEY'] %&amp;gt; s3_secret: &amp;lt;%= ENV['AWS_SECRET_KEY'] %&amp;gt; s3_bucket: musefind.com site: build index_document: index.html error_document: index.html cache_control: &quot;static/*&quot;: public, max-age=60000000 &quot;*&quot;: no-cache, no-store gzip: true cloudfront_distribution_id: &amp;lt;YOUR_DIST_ID&amp;gt; cloudfront_distribution_config: aliases: quantity: 1 items: CNAME: musefind.com cloudfront_invalidate_root: true cloudfront_wildcard_invalidation: true We keep something like this in the root of your repositories, with different file’s for staging and production environments. We also upload frequently small test projects without incurring any significant costs. This has been a big boost in productivity. Conclusion We now run a very cheap setup for our frontend applications with a heavy emphasis on developer productivity and speed to deploy. It takes us only a few minutes to get changes live to any of our four main websites. This has proven a big advantage in both bugfixes and keeping our frontend developers happy. Although it may be tricky to figure out, I encourage switching to S3 if you can. It takes some time to build up the resources and knowledge to run cloudfront and S3 together, but for the lean startup I think it’s a much superior approach to the conventional one of managing Nginx or Apache servers. Please let me know if you have any comments or questions!</summary></entry><entry><title type="html">GraphQL Api</title><link href="https://www.colinjfw.com/graphql-api/" rel="alternate" type="text/html" title="GraphQL Api" /><published>2016-10-01T00:00:00+00:00</published><updated>2016-10-01T00:00:00+00:00</updated><id>https://www.colinjfw.com/graphql-api</id><content type="html" xml:base="https://www.colinjfw.com/graphql-api/">&lt;blockquote&gt;
  &lt;p&gt;View the original Medium post &lt;a href=&quot;https://hackernoon.com/graphql-api-with-rails-faab252aaffa#.ufxhlt2l9&quot;&gt;here&lt;/a&gt;/&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Graphql is an awesome new technology which is making it easier for client&lt;/p&gt;

&lt;p&gt;side developers to iterate quickly and batch together network requests.&lt;/p&gt;

&lt;p&gt;I really like the promise provided by GraphQl however it is not as easy as rest to get up and running on immediately. This blog post takes a look at how to build a working GraphQL backend in just a few steps using rails.&lt;/p&gt;

&lt;p&gt;I am using my own project graphql-api as a framework for building out the GraphQL backend.&lt;/p&gt;

&lt;p&gt;We will look at building a basic blogging application. A blog will have an author and some tags.&lt;/p&gt;

&lt;p&gt;First create the rails backend.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;rails new blog-api &lt;span class=&quot;nt&quot;&gt;--api&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Add the necessary libraries to the Gemfile&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'graphql'&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'graphql-api'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Create our models&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;rails&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Author&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:string&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;rails&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Blog&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:text&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:references&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;rails&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:migrate&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Add our has many relations to author class&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Author&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;has_many&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:blogs&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Great! Now we have a basic setup for our blogging backend. Let’s add some controllers to serve basic Graphql queries.&lt;/p&gt;

&lt;p&gt;Add the following file to app/controllers/graphql_controller.rb.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GraphqlController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationController&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;SCHEMA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;GraphQL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Api&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Schema&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;schema&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;create&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;render&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;json: &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;SCHEMA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;variables: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:variables&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Add the following route to config/routes.rb&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;resources&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:graphql&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;only: :create&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now let’s test out the new api with curl. Start up the server and run the
following command to see if we have any blog posts&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl &lt;span class=&quot;nt&quot;&gt;-XPOST&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'query=query { blogs { id } }'&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
     localhost:3000/graphql
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;data&quot;&lt;/span&gt;:&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;blogs&quot;&lt;/span&gt;:[]&lt;span class=&quot;o&quot;&gt;}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s create an author&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl &lt;span class=&quot;nt&quot;&gt;-XPOST&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'query=mutation {
         createAuthor(input: {name: &quot;foobar&quot;}) {
            author { id }
     }}'&lt;/span&gt; localhost:3000/graphql
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;data&quot;&lt;/span&gt;:&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;createAuthor&quot;&lt;/span&gt;:&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;author&quot;&lt;/span&gt;:&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;id&quot;&lt;/span&gt;:1&lt;span class=&quot;o&quot;&gt;}}}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now let’s create a blog with that author’s id&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl &lt;span class=&quot;nt&quot;&gt;-XPOST&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'query=mutation {
         createBlog(input: {title: &quot;foobar&quot;, author_id: 1}) {
             blog { id }
      }}'&lt;/span&gt; localhost:3000/graphql
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;data&quot;&lt;/span&gt;:&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;createBlog&quot;&lt;/span&gt;:&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;blog&quot;&lt;/span&gt;:&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;id&quot;&lt;/span&gt;:1&lt;span class=&quot;o&quot;&gt;}}}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s try that first query again, but this time let’s try and return the blog authors as well as the blog name.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl &lt;span class=&quot;nt&quot;&gt;-XPOST&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'query=query {
  blogs {
    id
    title
    content
    author {
      name
    }
  }
}'&lt;/span&gt; localhost:3000/graphql
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can also run updateBlog mutations as well as updateAuthor mutations. Try deleting an author or blog and see what responses you get back.&lt;/p&gt;</content><author><name>Colin Walker</name></author><summary type="html">View the original Medium post here/ Graphql is an awesome new technology which is making it easier for client side developers to iterate quickly and batch together network requests. I really like the promise provided by GraphQl however it is not as easy as rest to get up and running on immediately. This blog post takes a look at how to build a working GraphQL backend in just a few steps using rails. I am using my own project graphql-api as a framework for building out the GraphQL backend. We will look at building a basic blogging application. A blog will have an author and some tags. First create the rails backend. rails new blog-api --api Add the necessary libraries to the Gemfile gem 'graphql' gem 'graphql-api' Create our models rails g model Author name:string rails g model Blog title:string content:text author:references rails db:migrate Add our has many relations to author class class Author has_many :blogs end Great! Now we have a basic setup for our blogging backend. Let’s add some controllers to serve basic Graphql queries. Add the following file to app/controllers/graphql_controller.rb. class GraphqlController &amp;lt; ApplicationController SCHEMA = GraphQL::Api::Schema.new.schema def create render json: SCHEMA.execute( params[:query], variables: params[:variables] || {}, ) end end Add the following route to config/routes.rb resources :graphql, only: :create Now let’s test out the new api with curl. Start up the server and run the following command to see if we have any blog posts curl -XPOST -d 'query=query { blogs { id } }' \ localhost:3000/graphql {&quot;data&quot;:{&quot;blogs&quot;:[]}} Let’s create an author curl -XPOST \ -d 'query=mutation { createAuthor(input: {name: &quot;foobar&quot;}) { author { id } }}' localhost:3000/graphql {&quot;data&quot;:{&quot;createAuthor&quot;:{&quot;author&quot;:{&quot;id&quot;:1}}}} Now let’s create a blog with that author’s id curl -XPOST \ -d 'query=mutation { createBlog(input: {title: &quot;foobar&quot;, author_id: 1}) { blog { id } }}' localhost:3000/graphql {&quot;data&quot;:{&quot;createBlog&quot;:{&quot;blog&quot;:{&quot;id&quot;:1}}}} Let’s try that first query again, but this time let’s try and return the blog authors as well as the blog name. curl -XPOST -d 'query=query { blogs { id title content author { name } } }' localhost:3000/graphql You can also run updateBlog mutations as well as updateAuthor mutations. Try deleting an author or blog and see what responses you get back.</summary></entry><entry><title type="html">Musefind</title><link href="https://www.colinjfw.com/musefind/" rel="alternate" type="text/html" title="Musefind" /><published>2016-07-15T00:00:00+00:00</published><updated>2016-07-15T00:00:00+00:00</updated><id>https://www.colinjfw.com/musefind</id><content type="html" xml:base="https://www.colinjfw.com/musefind/">&lt;p&gt;My current job is as a software developer with Musefind. We connect companies with influencers on instagram and other platforms to build strong social media campaigns. My work has revolved around building out the backend analytics platform as well as rebuilding portions of the user interface. I wanted to go through some of the challenges and what I’ve learned here.&lt;/p&gt;

&lt;p&gt;The biggest project I have started has me building out a social media analytics tool using graph databases. This is the first time I have ever jumped into graphs since some basic modelling when I was teaching myself. It has been a lot of fun but also really frustrating at times. Different services just haven’t given us the performance we needed which meant I ended up building my own graph structure in Java. It can only handle some really basic traversals, but it has fit the bill with insert performance which is what we needed.&lt;/p&gt;

&lt;p&gt;For this work Musefind was awarded funding from Canada’s board of Scientific Research and Experimental Development. This funding was awarded for the unique work done on graph databases.&lt;/p&gt;</content><author><name>Colin Walker</name></author><summary type="html">My current job is as a software developer with Musefind. We connect companies with influencers on instagram and other platforms to build strong social media campaigns. My work has revolved around building out the backend analytics platform as well as rebuilding portions of the user interface. I wanted to go through some of the challenges and what I’ve learned here. The biggest project I have started has me building out a social media analytics tool using graph databases. This is the first time I have ever jumped into graphs since some basic modelling when I was teaching myself. It has been a lot of fun but also really frustrating at times. Different services just haven’t given us the performance we needed which meant I ended up building my own graph structure in Java. It can only handle some really basic traversals, but it has fit the bill with insert performance which is what we needed. For this work Musefind was awarded funding from Canada’s board of Scientific Research and Experimental Development. This funding was awarded for the unique work done on graph databases.</summary></entry><entry><title type="html">Hive User Management App</title><link href="https://www.colinjfw.com/hive/" rel="alternate" type="text/html" title="Hive User Management App" /><published>2015-07-20T00:00:00+00:00</published><updated>2015-07-20T00:00:00+00:00</updated><id>https://www.colinjfw.com/hive</id><content type="html" xml:base="https://www.colinjfw.com/hive/">&lt;p&gt;This project currently supports over 250 users and organizations that are registered to work in the HiVE’s work sharing space. The project took a mess of Google Docs and allowed management to easily upload them into a cloud based application that took the headaches out of everyday management. Instead of trying to keep track of many different Key Fobs and Mailboxes, management is free to do what they do best.&lt;/p&gt;

&lt;p&gt;I took the project from conception, which started as a prototype of a project on Riipen, to reality in under a month. I worked closely with management to come up with specifications, and then continuously built features, implementing feedback and comments from management quickly and precisely.&lt;/p&gt;

&lt;p&gt;I credit both my technical skills in being able to quickly and efficiently build and test features as well as my interpersonal skills to be able to maintain a strong relationship with the director of HiVE, Melissa, who had the following to say about my original prototype:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Colin went above and beyond by creating a demo for us, so we could see and interact with how his idea might work! We were very impressed.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Melissa then went on to say the following about the final product, which overall took about a month to complete:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Colin found our project through Riipen and impressed us immediately by producing a beta version of what we needed from the short write-up we had posted. In one meeting and a few email correspondences, he refined that initial version into something that was just right for us: did everything we needed it to do, simply and easily. He worked with me to add more features as I thought of them and to make changes as we figured out what worked best for us. The process was very smooth. Colin always delivered what he said he would on time and was very responsive to questions. He took us from 6 separate spreadsheets to one beautiful database; I have already recommended him to a couple of other small organizations that might need this kind of work in the future.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Technical&lt;/p&gt;

&lt;p&gt;Technically, this Rails application focused on simplicity, ease of use and speed. Almost everything is cached to provide lightning fast results even on free Heroku dynos. The layout is simple and easy to use and focuses on productivity rather than looks.&lt;/p&gt;

&lt;p&gt;One of the most technically challenging pieces of this project was to provide an easy to use interface for staff to upload their Google docs containing their entire user base. This was implemented with a CSV upload, and rigid error catching that displays every record and whether it was successfully uploaded, or what errors took place.&lt;/p&gt;

&lt;p&gt;Otherwise, most of the work was focused on providing a very standardized and simple Rails way method of doing things with significant refactoring throughout. Overall, I am very happy with the final product, as I think it shows off greatly my style, simple and fast.&lt;/p&gt;</content><author><name>Colin Walker</name></author><summary type="html">This project currently supports over 250 users and organizations that are registered to work in the HiVE’s work sharing space. The project took a mess of Google Docs and allowed management to easily upload them into a cloud based application that took the headaches out of everyday management. Instead of trying to keep track of many different Key Fobs and Mailboxes, management is free to do what they do best. I took the project from conception, which started as a prototype of a project on Riipen, to reality in under a month. I worked closely with management to come up with specifications, and then continuously built features, implementing feedback and comments from management quickly and precisely. I credit both my technical skills in being able to quickly and efficiently build and test features as well as my interpersonal skills to be able to maintain a strong relationship with the director of HiVE, Melissa, who had the following to say about my original prototype: Colin went above and beyond by creating a demo for us, so we could see and interact with how his idea might work! We were very impressed. Melissa then went on to say the following about the final product, which overall took about a month to complete: Colin found our project through Riipen and impressed us immediately by producing a beta version of what we needed from the short write-up we had posted. In one meeting and a few email correspondences, he refined that initial version into something that was just right for us: did everything we needed it to do, simply and easily. He worked with me to add more features as I thought of them and to make changes as we figured out what worked best for us. The process was very smooth. Colin always delivered what he said he would on time and was very responsive to questions. He took us from 6 separate spreadsheets to one beautiful database; I have already recommended him to a couple of other small organizations that might need this kind of work in the future. Technical Technically, this Rails application focused on simplicity, ease of use and speed. Almost everything is cached to provide lightning fast results even on free Heroku dynos. The layout is simple and easy to use and focuses on productivity rather than looks. One of the most technically challenging pieces of this project was to provide an easy to use interface for staff to upload their Google docs containing their entire user base. This was implemented with a CSV upload, and rigid error catching that displays every record and whether it was successfully uploaded, or what errors took place. Otherwise, most of the work was focused on providing a very standardized and simple Rails way method of doing things with significant refactoring throughout. Overall, I am very happy with the final product, as I think it shows off greatly my style, simple and fast.</summary></entry><entry><title type="html">Fitbit Analyzer</title><link href="https://www.colinjfw.com/fitbit-analyzer/" rel="alternate" type="text/html" title="Fitbit Analyzer" /><published>2015-07-01T00:00:00+00:00</published><updated>2015-07-01T00:00:00+00:00</updated><id>https://www.colinjfw.com/fitbit-analyzer</id><content type="html" xml:base="https://www.colinjfw.com/fitbit-analyzer/">&lt;p&gt;I built this project to create a sleep cycle analyzer from my Fitbit data. I am very interested in the change in sleep patterns across people, and I think there is a lot you can tell from someone’s sleep. Fitbit unfortunately does not calculate sleep cycles, but they do give second level heart rate data and accelerometer data for a person’s sleep. This app combines this data and then applies an algorithm that I built to analyze a person’s sleep. I hope to continue working on this project and promote it once I finalize the algorithm to help people understand their sleep cycles better.&lt;/p&gt;

&lt;p&gt;This project depends on the gem at https://github.com/ColDog/oauth2-fitbit-rails&lt;/p&gt;

&lt;p&gt;The Fitbit API was the major challenge to this project. I could not find a suitable Oauth2 gem or a suitable gem to hook into the Fitbit API. As a result, I ended up building my own client gem linked above. I did not want it attached to the project for both reusability and testing purposes. It ended up being a good exercise.&lt;/p&gt;

&lt;p&gt;The project is very simply in layout. I have a home controller, a user controller and a controller to handle the Oauth callbacks. The user simply signs in with Fitbit, where I use the ID they send to create a user in the database. It is basically a one page app, the user signs in and is then directed to the users controller, where they can select a date to view their sleep patterns. The difficulty in this project came down to analyzing the data in a quick and efficient manner.&lt;/p&gt;

&lt;p&gt;The App gets your sleep data from Fitbit which includes high level information from the accelerometer, giving you a basic idea of how restless you were. It then gets makes a call to the heart rate endpoint based on the length of your sleep and gets the second level heart rate data. Finally, it takes these two separate JSON strings, and builds them into one two dimensional array, including the sleep stages (my own algorithm), moving averages, overall average, volatility and resting heart rate.&lt;/p&gt;

&lt;p&gt;To get all the data I need to build a chart like in the picture above, I need to make at least three different API calls, sometimes four depending on the date. One of the trickier parts was figuring out the date of the sleep, and getting the exact series for the heart rate that was needed, since the measurements for the accelerometer and the heart rate come in different series, this meant I had to develop a data structure to quickly search through heart rate data and find the corresponding time for the accelerometer, and then place both of those in the same, new, data structure. Everything is saved to a big Postgres array. It takes around 100ms to actually save the data, but once it is saved there is no reason to need to modify the data unless the algorithm changes.&lt;/p&gt;

&lt;p&gt;My own sleep cycle algorithm is not yet finished. I’m really enjoying the intellectual challenge in taking this on, however. Not being a professional sleep scientist, it’s obviously a challenge to interpret the data. That being said, to just get a high level overview of where your approximate sleep stage was, I think, is possible to do without to much complication from the heart rate and accelerometer data. Stay tuned for more updates on this though!&lt;/p&gt;

&lt;p&gt;The Gem&lt;/p&gt;

&lt;p&gt;I ended up building my own Gem based on Faraday to hook into the Fitbit API, and provide the Oauth2 client. It ended up being much more simple than using a high level strategy, I think the problem with the current gems available is that you still have to roll your own token refreshing system and handle errors in case a token does sit for too long. In the end you end up rebuilding whatever you started with. That being said, I would like to work on extracting out the logic in the gem to generalize it for any api. I think it’s useful going with a Rails version as well, I haven’t seen this yet on GitHub, and it allows me to simply call update on the initialized User object to update tokens.&lt;/p&gt;</content><author><name>Colin Walker</name></author><summary type="html">I built this project to create a sleep cycle analyzer from my Fitbit data. I am very interested in the change in sleep patterns across people, and I think there is a lot you can tell from someone’s sleep. Fitbit unfortunately does not calculate sleep cycles, but they do give second level heart rate data and accelerometer data for a person’s sleep. This app combines this data and then applies an algorithm that I built to analyze a person’s sleep. I hope to continue working on this project and promote it once I finalize the algorithm to help people understand their sleep cycles better. This project depends on the gem at https://github.com/ColDog/oauth2-fitbit-rails The Fitbit API was the major challenge to this project. I could not find a suitable Oauth2 gem or a suitable gem to hook into the Fitbit API. As a result, I ended up building my own client gem linked above. I did not want it attached to the project for both reusability and testing purposes. It ended up being a good exercise. The project is very simply in layout. I have a home controller, a user controller and a controller to handle the Oauth callbacks. The user simply signs in with Fitbit, where I use the ID they send to create a user in the database. It is basically a one page app, the user signs in and is then directed to the users controller, where they can select a date to view their sleep patterns. The difficulty in this project came down to analyzing the data in a quick and efficient manner. The App gets your sleep data from Fitbit which includes high level information from the accelerometer, giving you a basic idea of how restless you were. It then gets makes a call to the heart rate endpoint based on the length of your sleep and gets the second level heart rate data. Finally, it takes these two separate JSON strings, and builds them into one two dimensional array, including the sleep stages (my own algorithm), moving averages, overall average, volatility and resting heart rate. To get all the data I need to build a chart like in the picture above, I need to make at least three different API calls, sometimes four depending on the date. One of the trickier parts was figuring out the date of the sleep, and getting the exact series for the heart rate that was needed, since the measurements for the accelerometer and the heart rate come in different series, this meant I had to develop a data structure to quickly search through heart rate data and find the corresponding time for the accelerometer, and then place both of those in the same, new, data structure. Everything is saved to a big Postgres array. It takes around 100ms to actually save the data, but once it is saved there is no reason to need to modify the data unless the algorithm changes. My own sleep cycle algorithm is not yet finished. I’m really enjoying the intellectual challenge in taking this on, however. Not being a professional sleep scientist, it’s obviously a challenge to interpret the data. That being said, to just get a high level overview of where your approximate sleep stage was, I think, is possible to do without to much complication from the heart rate and accelerometer data. Stay tuned for more updates on this though! The Gem I ended up building my own Gem based on Faraday to hook into the Fitbit API, and provide the Oauth2 client. It ended up being much more simple than using a high level strategy, I think the problem with the current gems available is that you still have to roll your own token refreshing system and handle errors in case a token does sit for too long. In the end you end up rebuilding whatever you started with. That being said, I would like to work on extracting out the logic in the gem to generalize it for any api. I think it’s useful going with a Rails version as well, I haven’t seen this yet on GitHub, and it allows me to simply call update on the initialized User object to update tokens.</summary></entry><entry><title type="html">Sudoku Builder</title><link href="https://www.colinjfw.com/sudoku-solver/" rel="alternate" type="text/html" title="Sudoku Builder" /><published>2015-04-16T00:00:00+00:00</published><updated>2015-04-16T00:00:00+00:00</updated><id>https://www.colinjfw.com/sudoku-solver</id><content type="html" xml:base="https://www.colinjfw.com/sudoku-solver/">&lt;p&gt;This sudoku solving algorithm I hope shows off my ability to build and design good data structures and algorithms. I hope to walk you through my thought process and design.&lt;/p&gt;

&lt;p&gt;Overall, the algorithm is simple to describe. First, build an array of numbers from 1 to 9 that are not in the current squares row, column or grid. If this array has at least one number in it, insert this number into the square and repeat the process for the next square. If the array is empty, meaning there are no possible solutions to this puzzle, move back a square, delete the number in this square and try again. One key part of this is having a duplicate data structure to handle the already tried values, making sure that we don’t simply jump back and forth between squares with the same two numbers.&lt;/p&gt;

&lt;h3 id=&quot;the-code&quot;&gt;The Code&lt;/h3&gt;

&lt;p&gt;The Puzzle contains a three dimensional array that looks almost like a sudoku puzzle is normally displayed, with each grid being fenced in by brackets. This is to easily find the values of the grid that the current sudoku is in without the use of many different loops.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Each value is represented with an empty array, this is an easy way of translating between the previously used sudoku puzzles and the current one that has empty values. This allows us to easily call an increment and de-increment functions to easily move up and down the puzzle.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;increment&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@loc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@loc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@loc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# increment row&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@loc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@loc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@loc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;elsif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# increment grid&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@loc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@loc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;elsif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# increment column&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@loc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;de_increment&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@loc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@loc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@loc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# reset everything&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;reset&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;elsif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# de increment row&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@loc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@loc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@loc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;elsif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# de increment grid&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@loc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@loc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;elsif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# de increment column&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@loc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Once we have these methods, we only need to get the current column, row and grid of the square that we are in. These are as follows.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;row&lt;/span&gt;
  &lt;span class=&quot;vi&quot;&gt;@sud&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@loc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;flatten&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;column&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@loc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@loc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;cols&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
  &lt;span class=&quot;vi&quot;&gt;@sud&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cols&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;cols&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;flatten&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;grid&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@loc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@loc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;grids&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;elsif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;elsif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;times&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;grids&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@sud&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;grids&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;flatten&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As you can see, the row method is much simpler, while the grid method still involves a loop, which I would like to get out of. This means the data structure is essentially complete, and we can now easily create the solving and building algorithm. This is made simple with the good data structure that we have in place. Note that @loc is the current location that we are at, which consists of three variables corresponding to each part of the three dimensional sudoku array.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;solve&lt;/span&gt;
  &lt;span class=&quot;vi&quot;&gt;@loc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@tot&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;up&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@sud&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@loc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Fixnum&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;up&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;increment&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;elsif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;up&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;de_increment&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;poss&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_possibilities&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;poss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;empty?&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;poss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sample&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;increment&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;up&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;de_increment&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;up&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@tot&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Colin Walker</name></author><summary type="html">This sudoku solving algorithm I hope shows off my ability to build and design good data structures and algorithms. I hope to walk you through my thought process and design. Overall, the algorithm is simple to describe. First, build an array of numbers from 1 to 9 that are not in the current squares row, column or grid. If this array has at least one number in it, insert this number into the square and repeat the process for the next square. If the array is empty, meaning there are no possible solutions to this puzzle, move back a square, delete the number in this square and try again. One key part of this is having a duplicate data structure to handle the already tried values, making sure that we don’t simply jump back and forth between squares with the same two numbers. The Code The Puzzle contains a three dimensional array that looks almost like a sudoku puzzle is normally displayed, with each grid being fenced in by brackets. This is to easily find the values of the grid that the current sudoku is in without the use of many different loops. [ [ [ [], [], [] ], [ [], [], [] ], [ [], [], [] ] ], [ [ [], [], [] ], [ [], [], [] ], [ [], [], [] ] ], [ [ [], [], [] ], [ [], [], [] ], [ [], [], [] ] ], [ [ [], [], [] ], [ [], [], [] ], [ [], [], [] ] ], [ [ [], [], [] ], [ [], [], [] ], [ [], [], [] ] ], [ [ [], [], [] ], [ [], [], [] ], [ [], [], [] ] ], [ [ [], [], [] ], [ [], [], [] ], [ [], [], [] ] ], [ [ [], [], [] ], [ [], [], [] ], [ [], [], [] ] ], [ [ [], [], [] ], [ [], [], [] ], [ [], [], [] ] ], ] Each value is represented with an empty array, this is an easy way of translating between the previously used sudoku puzzles and the current one that has empty values. This allows us to easily call an increment and de-increment functions to easily move up and down the puzzle. def increment r = @loc[0] ; g = @loc[1] ; c = @loc[2] if g == 2 &amp;amp;&amp;amp; c == 2 # increment row @loc[0] += 1 @loc[1] = 0 @loc[2] = 0 elsif c == 2 &amp;amp;&amp;amp; g &amp;lt; 3 # increment grid @loc[1] += 1 @loc[2] = 0 elsif c &amp;lt; 2 # increment column @loc[2] += 1 end end def de_increment r = @loc[0] ; g = @loc[1] ; c = @loc[2] if r == 0 &amp;amp;&amp;amp; g == 0 &amp;amp;&amp;amp; c == 0 # reset everything @res += 1 reset elsif c == 0 &amp;amp;&amp;amp; g == 0 # de increment row @loc[0] -= 1 @loc[1] = 2 @loc[2] = 2 elsif c == 0 &amp;amp;&amp;amp; r &amp;gt;= 0 # de increment grid @loc[1] -= 1 @loc[2] = 2 elsif c &amp;gt; 0 # de increment column @loc[2] -= 1 end end Once we have these methods, we only need to get the current column, row and grid of the square that we are in. These are as follows. def row @sud[@loc[0]].flatten end def column c = @loc[2] ; g = @loc[1] cols = [] @sud.each do |row| cols &amp;lt;&amp;lt; row[g][c] end cols.flatten end def grid g = @loc[1] ; r = @loc[0] ; grids = [] if r &amp;lt;= 2 i = 0 elsif r &amp;lt;= 5 &amp;amp;&amp;amp; r &amp;gt; 2 i = 3 elsif r &amp;lt;= 8 &amp;amp;&amp;amp; r &amp;gt; 5 i = 6 end 3.times do grids &amp;lt;&amp;lt; @sud[i][g] i += 1 end grids.flatten end As you can see, the row method is much simpler, while the grid method still involves a loop, which I would like to get out of. This means the data structure is essentially complete, and we can now easily create the solving and building algorithm. This is made simple with the good data structure that we have in place. Note that @loc is the current location that we are at, which consists of three variables corresponding to each part of the three dimensional sudoku array. def solve @loc = [0,0,0] ; @tot = 0 ; @res = 0 ; up = true loop do return @sud if @loc == [9,0,0] if value.class == Fixnum if up == true increment elsif up == false de_increment end else poss = get_possibilities if !poss.empty? write(poss.sample) increment ; up = true else de_increment ; up = false end end @tot += 1 end end</summary></entry></feed>